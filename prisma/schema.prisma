generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]

  employees        Employee[]
  guardians        Guardian[]
  participants     Participant[]
  tripGuardians    TripGuardian[]
  tripParticipants TripParticipant[]
  tripEmployees    TripEmployee[]

  role MemberRole @default(GUEST)

  Fee    Fee[]
  Rating Rating[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
  GUARDIAN
  DRIVER
  GUIDE
}

model Trip {
  id               String            @id @default(cuid())
  name             String
  dateFrom         DateTime
  dateTo           DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tripGuardians    TripGuardian[]
  tripParticipants TripParticipant[]
  tripEmployees    TripEmployee[]
  tripDestinations TripDestination[]
  fees             Fee[]
  ratings          Rating[]
}

model Guardian {
  id                    String                @id @default(cuid())
  first_name            String
  last_name             String
  role                  String
  email                 String
  phone                 String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  guardiansParticipants GuardianParticipant[]
  User                  User?                 @relation(fields: [userId], references: [id])
  userId                String?
  TripGuardian          TripGuardian[]
}

model Employee {
  id            String         @id @default(cuid())
  first_name    String
  last_name     String
  role          String
  email         String
  phone         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tripEmployees TripEmployee[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
}

model Participant {
  id                  String                @id @default(cuid())
  first_name          String
  last_name           String
  user_id             String
  emergency_contact   String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  tripParticipants    TripParticipant[]
  User                User?                 @relation(fields: [userId], references: [id])
  userId              String?
  GuardianParticipant GuardianParticipant[]
}

model Destination {
  id               String            @id @default(cuid())
  name             String
  description      String
  location         String
  photo_url        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tripDestinations TripDestination[]
}

model Fee {
  id             String   @id @default(cuid())
  trip_id        String
  user_id        String
  payment_status Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  trip           Trip     @relation(fields: [trip_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id])
}

model Rating {
  id             String   @id @default(cuid())
  trip_id        String
  user_id        String
  rating         Int
  review_content String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  trip           Trip     @relation(fields: [trip_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id])
}

model GuardianParticipant {
  id             String      @id @default(cuid())
  guardian_id    String
  participant_id String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  guardian       Guardian    @relation(fields: [guardian_id], references: [id])
  participant    Participant @relation(fields: [participant_id], references: [id])
}

model TripGuardian {
  id          String   @id @default(cuid())
  trip_id     String
  guardian_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [trip_id], references: [id])
  guardian    Guardian @relation(fields: [guardian_id], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model TripParticipant {
  id             String      @id @default(cuid())
  trip_id        String
  participant_id String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  trip           Trip        @relation(fields: [trip_id], references: [id])
  participant    Participant @relation(fields: [participant_id], references: [id])
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?
}

model TripEmployee {
  id          String   @id @default(cuid())
  trip_id     String
  employee_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trip        Trip     @relation(fields: [trip_id], references: [id])
  employee    Employee @relation(fields: [employee_id], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model TripDestination {
  id             String      @id @default(cuid())
  trip_id        String
  destination_id String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  trip           Trip        @relation(fields: [trip_id], references: [id])
  destination    Destination @relation(fields: [destination_id], references: [id])
}
